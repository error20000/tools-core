package PK;

import java.util.Base64;
import java.util.List;
import java.util.Random;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import Config;
import Constant;
import ServiceException;
import com.jian.tools.core.CacheTools;
import com.jian.tools.core.JsonTools;
import com.jian.tools.core.Tips;
import com.jian.tools.core.Tools;
import com.jian.tools.core.XXTEA;
import com.jian.tools.core.cache.CacheObject;

/**
 * token工具类
 * 
 * @author liujian
 * @Date 2020/11/27
 *
 */
@Component
public class TokenUtils {
	
	public static Config config = null;
	
	public static String tokenName = "token";
	
	@Autowired
	public void setConfig(Config config){
		TokenUtils.config = config;
	}
	
	/**
	 * 	获取token字符串
	 * @return
	 */
	public static String getLoginToken(){
		HttpServletRequest req =  ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();
		return getLoginToken(req);
	}

	/**
	 * 	获取token字符串
	 * @param req
	 * @return
	 */
	public static String getLoginToken(HttpServletRequest req){
		//读取cookie
		String tokenStr = "";
		Cookie[] cookies = req.getCookies();
		if(cookies != null){
			for (int i = 0; i < cookies.length; i++) {
				Cookie tmp = cookies[i];
				if(tokenName.equals(tmp.getName())){
					tokenStr = tmp.getValue();
					break;
				}
			}
		}
		//Authorization
		if(Tools.isNullOrEmpty(tokenStr)){
			tokenStr = Tools.isNullOrEmpty(req.getHeader("Authorization")) ? "" : Base64.getDecoder().decode(req.getHeader("Authorization").replace("Basic ", "")).toString();
		}
		//header parameter
		if(Tools.isNullOrEmpty(tokenStr)){
			tokenStr = Tools.isNullOrEmpty(req.getHeader(tokenName)) ? Tools.getReqParamSafe(req, tokenName) : req.getHeader(tokenName);
		}
		return tokenStr;
	}
	
	/**
	 * 	检查token是否有效
	 * @param tokenStr	token字符串
	 * @return
	 */
	public static boolean checkLoginToken(String tokenStr){
		if(Tools.isNullOrEmpty(tokenStr)) {
			throw new ServiceException(Tips.ERROR211, tokenName);
		}
		String token = getToken(tokenStr);
		String userId = getUserId(tokenStr);
		long time = getTime(tokenStr);
		long expire = getExpire(tokenStr);
		String plat = getPlat(tokenStr);
		//判断超时
		long cur = System.currentTimeMillis();
		if((time + expire) < cur){
			throw new ServiceException(Tips.ERROR214, tokenName);
		}
		String str = userId + "." + time + "."  + expire + "." + plat;
		return token.equals(tokenMd5(str));
	}
	
	public static String getToken(String tokenStr){
		String token = "";
		if(!Tools.isNullOrEmpty(tokenStr) && tokenStr.split("[.]").length >= 1){
			token = tokenStr.split("[.]")[0];
		}
		return token;
	}
	
	public static String getUserId(String tokenStr){
		String userId = "";
		if(!Tools.isNullOrEmpty(tokenStr) && tokenStr.split("[.]").length >= 2){
			userId = tokenStr.split("[.]")[1];
		}
		return userId;
	}
	
	public static long getTime(String tokenStr){
		long time = 0;
		if(!Tools.isNullOrEmpty(tokenStr) && tokenStr.split("[.]").length >= 3){
			time = Long.parseLong(tokenStr.split("[.]")[2]);
		}
		return time;
	}
	
	public static long getExpire(String tokenStr){
		long expire = 0;
		if(!Tools.isNullOrEmpty(tokenStr) && tokenStr.split("[.]").length >= 4){
			expire = Long.parseLong(tokenStr.split("[.]")[3]);
		}
		return expire;
	}
	
	public static String getPlat(String tokenStr){
		String plat = "";
		if(!Tools.isNullOrEmpty(tokenStr) && tokenStr.split("[.]").length >= 5){
			plat = tokenStr.split("[.]")[4];
		}
		return plat;
	}
	
	/**
	 * 	判断是否登录
	 * @param tokenStr	token字符串
	 * @return
	 */
	public static boolean isLogin(String tokenStr){
		return isLogin(Constant.userLoginOn, tokenStr);
	}
	
	/**
	 * 	判断是否登录
	 * @param cacheKeyPrefix	缓存前缀
	 * @param tokenStr	token字符串
	 * @return
	 */
	public static boolean isLogin(String cacheKeyPrefix, String tokenStr){
		if(!checkLoginToken(tokenStr)) {
			throw new ServiceException(Tips.ERROR213, tokenName);
		}
		String tkey = getTokenCacheKey(cacheKeyPrefix, tokenStr);
		CacheObject test = CacheTools.getCacheObj(tkey);
		if(test == null) {
			throw new ServiceException(Tips.ERROR214, "登录");
		}
		return tokenStr.equals(test.getValue()); //与缓存的token字符串比较，判断登录是否还有效
	}
	
	/**
	 * 	获取登录用户
	 * @param <T>
	 * @param clss	转换类
	 * @return
	 */
	public static  <T> T getLoginUser(Class<T> clss){
		HttpServletRequest req =  ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();
		return getLoginUser(getLoginToken(req), clss);
	}
	
	/**
	 * 	获取登录用户
	 * @param <T>
	 * @param tokenStr	token字符串
	 * @param clss	转换类
	 * @return
	 */
	public static <T> T getLoginUser(String tokenStr, Class<T> clss){
		return getLoginUser(Constant.userLoginOn, tokenStr, clss);
	}
	
	/**
	 * 	获取登录用户
	 * @param <T>
	 * @param cacheKeyPrefix	缓存前缀
	 * @param tokenStr	token字符串
	 * @param clss	转换类
	 * @return
	 */
	public static <T> T getLoginUser(String cacheKeyPrefix, String tokenStr, Class<T> clss){
		if(!isLogin(tokenStr)) { //判断是否登录
			throw new ServiceException(Tips.ERROR214, tokenName);
		}
		String ukey = getUserCacheKey(cacheKeyPrefix, tokenStr);
		CacheObject test = CacheTools.getCacheObj(ukey);
		if(test == null ) {
			throw new ServiceException(Tips.ERROR214, "登录");
		}
		T user = JsonTools.jsonToObj((String)test.getValue(), clss);
		if(user == null ) {
			throw new ServiceException(Tips.ERROR114, "获取"+clss.getSimpleName());
		}
		return user;
	}
	
	/**
	 * 	缓存登录用户
	 * @param <T>
	 * @param tokenStr	token字符串
	 * @param obj	用户信息
	 */
	public static <T> void setLoginUser(String tokenStr, T obj){
		setLoginUser(Constant.userLoginOn, tokenStr, obj);
	}
	
	/**
	 * 	缓存登录用户
	 * @param <T>	
	 * @param cacheKeyPrefix	缓存前缀
	 * @param tokenStr	token字符串
	 * @param obj	用户信息
	 */
	public static <T> void setLoginUser(String cacheKeyPrefix, String tokenStr, T obj){
		if(!checkLoginToken(tokenStr)) {
			throw new ServiceException(Tips.ERROR213, tokenName);
		}
		if(config.allowOnePlatformMultipleLogin) {
			//使旧token失效
			String oldTokenStr = getLoginToken();
			if(!Tools.isNullOrEmpty(oldTokenStr)) {
				clearLoginUser(oldTokenStr);
			}
		}
		String tkey = getTokenCacheKey(cacheKeyPrefix, tokenStr);
		String ukey = getUserCacheKey(cacheKeyPrefix, tokenStr);
		CacheTools.setCacheObj(tkey, tokenStr, config.tokenExpireTime); //缓存登录的信息
		CacheTools.setCacheObj(ukey, JsonTools.toJsonString(obj), config.tokenExpireTime);  //缓存用户的信息
	}
	
	/**
	 * 	退出登录
	 * @param tokenStr
	 */
	public static void clearLoginUser(String tokenStr){
		clearLoginUser(Constant.userLoginOn, tokenStr);
	}
	
	/**
	 * 	退出登录
	 * @param cacheKeyPrefix
	 * @param tokenStr
	 */
	public static void clearLoginUser(String cacheKeyPrefix, String tokenStr){
		if(!checkLoginToken(tokenStr)) {
			throw new ServiceException(Tips.ERROR213, tokenName);
		}
		String tkey = getTokenCacheKey(cacheKeyPrefix, tokenStr);
		String ukey = getUserCacheKey(cacheKeyPrefix, tokenStr);
		CacheTools.clearCacheObj(tkey); //清除Token
		CacheTools.clearCacheObj(ukey); //清除User
	}
	
	/**
	 * 	清除用户所有的登录
	 * @param userId
	 */
	public static void clearToken(String userId){
		clearToken(Constant.userLoginOn, userId);
	}
	
	/**
	 *  清除用户所有的登录
	 * @param cacheKeyPrefix
	 * @param userId
	 */
	public static void clearToken(String cacheKeyPrefix, String userId){
		if(Tools.isNullOrEmpty(userId)) {
			throw new ServiceException(Tips.ERROR211, "userId");
		}
		String regex = cacheKeyPrefix + ".*" + userId + ".*";
		List<String> list = CacheTools.keys(regex); //获取相关key
		for (String str : list) {
			CacheTools.clearCacheObj(str); //清除key
		}
	}
	
	/**
	 * 	检查用户登录密码
	 * @param userId	用户id
	 * @param password	加密后的密码（保存在数据库的密码）
	 * @param salt	盐
	 * @param pwd	明文密码（登录时输入的密码）
	 */
	public static void checkLoinPassword(String userId, String password, String salt, String pwd) {
		checkLoinPassword(userId, password, pwdMd5(pwd, salt));
	}

	/**
	 * 	检查用户登录密码
	 * @param userId	用户id
	 * @param password	加密后的密码（保存在数据库的密码）
	 * @param password2	加密后的密码（登录时输入的密码加密后）
	 */
	public static void checkLoinPassword(String userId, String password, String password2) {
		if(Tools.isNullOrEmpty(userId)) {
			throw new ServiceException(Tips.ERROR108);
		}
		if(Tools.isNullOrEmpty(password)) {
			throw new ServiceException(Tips.ERROR108);
		}
		if(Tools.isNullOrEmpty(password2)) {
			throw new ServiceException(Tips.ERROR108);
		}
		//时长
		String tkey = Constant.userLoginErrorPwdTime + userId;
		CacheObject tobj = CacheTools.getCacheObj(tkey);
		if(tobj != null) {
			int m = (int)((tobj.getTimeOut() - System.currentTimeMillis()) / (60 * 1000));
			m = m <= 0 ? 1 : m;
			throw new ServiceException(Tips.ERROR108.getCode(), "账号登录失败，请" +m+"分钟后重试。");
		}
		//次数
		String ckey = "";
		if(!password.equals(password2)){
			if(config.maxLoginCount == 0) {
				throw new ServiceException(Tips.ERROR110); //不限次数
			}
			//限制错误次数
			int loinTime = config.maxLoginCount - 1;
			ckey = Constant.userLoginErrorPwdCount + userId;
			CacheObject cobj = CacheTools.getCacheObj(ckey);
			if(cobj == null){
				CacheTools.setCacheObj(ckey, loinTime);
			}else{
				loinTime = Integer.parseInt(cobj.getValue()+"");
				loinTime--;
				if(loinTime <= 0){
					//进入时长限制
					CacheTools.setCacheObj(tkey, 1, config.maxLoginTime); 
					//解除次数禁用
					CacheTools.clearCacheObj(ckey); 
				}else{
					CacheTools.setCacheObj(ckey, loinTime); //更新次数
				}
			}
			throw new ServiceException(Tips.ERROR108.getCode(), "账号登录失败，剩余次数" + loinTime);
		}
		if(!Tools.isNullOrEmpty(ckey)) {
			CacheTools.clearCacheObj(ckey); //密码正确，解除次数限制
			CacheTools.clearCacheObj(tkey); 
		}
	}
	
	/**
	 * 	新建token
	 * @param userId	用户id
	 * @return	token字符串
	 */
	public static String newToken(String userId){
		return newToken(userId, config.tokenExpireTime, "");
	}
	
	/**
	 * 	新建token
	 * @param userId	用户id
	 * @param platform	平台标识
	 * @return	token字符串
	 */
	public static String newToken(String userId, String platform){
		return newToken(userId, config.tokenExpireTime, platform);
	}
	
	/**
	 * 	新建token
	 * @param userId	用户id
	 * @param expireTime	token有效期（毫秒）
	 * @param platform	平台标识
	 * @return	token字符串
	 */
	public static String newToken(String userId, int expireTime, String platform){
		long curTime = System.currentTimeMillis();
		String plat = getPlatform(platform);
		String str = userId + "." + curTime + "."  + expireTime + "."  + plat;
		String token = tokenMd5(str); // userId + time + expire + plat + key
		String tokenStr = token + "." + str;
		return tokenStr;
	}
	
	/**
	 * 	获取登录用户的token的缓存key
	 * @param tokenStr
	 * @return
	 */
	public static String getTokenCacheKey(String tokenStr) {
		return getTokenCacheKey(Constant.userLoginOn, tokenStr);
	}
	
	/**
	 * 	获取登录用户的用户详情的缓存key
	 * @param tokenStr
	 * @return
	 */
	public static String getUserCacheKey(String tokenStr) {
		return getUserCacheKey(Constant.userLoginOn, tokenStr);
	}
	
	private static String getTokenCacheKey(String cacheKeyPrefix, String tokenStr) {
		String userId = getUserId(tokenStr);
		String plat = getPlat(tokenStr);
		if(config.allowOnePlatformMultipleLogin) {
			String token = getToken(tokenStr);
			return cacheKeyPrefix + plat + ":token:" + userId + ":" + token; //生成缓存Key(Token)
		}
		return cacheKeyPrefix + plat + ":token:" + userId; //生成缓存Key(Token)
	}
	
	private static String getUserCacheKey(String cacheKeyPrefix, String tokenStr) {
		String userId = getUserId(tokenStr);
		String plat = getPlat(tokenStr);
		if(config.allowOnePlatformMultipleLogin) {
			String token = getToken(tokenStr);
			return cacheKeyPrefix + plat + ":user:" + userId + ":" + token; //生成缓存Key(Token)
		}
		return cacheKeyPrefix + plat + ":user:" + userId; //生成缓存Key(User)
	}
	
	private static String getPlatform(String platform) {
		if(!config.allowMultiplePlatformLogin) {
			return config.loginOnPc;
		}
		if(Tools.isNullOrEmpty(platform)) {
			return config.loginOnPc;
		}
		if(config.loginOnPc.equalsIgnoreCase(platform)) {
			return config.loginOnPc;
		}else if(config.loginOnMobile.equalsIgnoreCase(platform)) {
			return config.loginOnMobile;
		}else if(config.loginOnPad.equalsIgnoreCase(platform)) {
			return config.loginOnPad;
		}else if(config.loginOnOther.equalsIgnoreCase(platform)) {
			return config.loginOnOther;
		}
		throw new ServiceException(Tips.ERROR200, "platform");
	}
	
	private static String tokenMd5(String str) {
		String token = Tools.md5(str + config.tokenSecretKey);
		if(config.tokenMd5Count > 1) {
			for (int i = 1; i < config.tokenMd5Count; i++) {
				token = Tools.md5(token);
			}
		}
		return token;
	}

	/**
	 * 	密码md5
	 * @param str	密码
	 * @return
	 */
	public static String pwdMd5(String str) {
		return pwdMd5(str, "");
	}
	
	/**
	 * 	密码md5
	 * @param str	密码
	 * @param salt	盐
	 * @return
	 */
	public static String pwdMd5(String str, String salt) {
		if(config.pwdAddSalt) {
			str = str + salt;
		}
		String pwd = Tools.md5(str);
		if(config.pwdMd5Count > 1) {
			for (int i = 1; i < config.pwdMd5Count; i++) {
				pwd = Tools.md5(pwd);
			}
		}
		return pwd;
	}
	
	/**
	 * 	生产随机盐 4-9位
	 * @return
	 */
    public static String getRandomSalt() {
    	String val = "";
		Random random = new Random();
		int length = 4 + random.nextInt(6); // 4-9位
		for (int i = 0; i < length; i++) {
//			String charOrNum = i % 2 == 0 ? "num" : "char"; //数字 字母间隔
			String charOrNum = random.nextInt(2) % 2 == 0 ? "num" : "char"; //随机 数字 字母
			
			if ("char".equalsIgnoreCase(charOrNum)){ 
				int choice = random.nextInt(2) % 2 == 0 ? 65 : 97;   //随机 大小 字母
				val += (char) (choice + random.nextInt(26));
			} else if ("num".equalsIgnoreCase(charOrNum)){ 
				val += String.valueOf(random.nextInt(10));
			}
		}
    	return val;
    }

	public static byte[] encryptXXTEA(byte[] data){
		/*if(data.length < 5){
			data = Arrays.copyOf(data, 5);
		}
		if(key.length < 13){
			key = Arrays.copyOf(key, 13);
		}*/
		return XXTEA.encrypt(data, config.xxteaKey.getBytes());
	}
	
	
	public static byte[] decryptXXTEA(byte[] data){
		return XXTEA.decrypt(data, config.xxteaKey.getBytes());
	}
	
	public static void main(String[] args) {
		System.out.println(getRandomSalt());
	}
}
