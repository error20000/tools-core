package PK;

import java.io.File;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.annotation.Order;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.jian.exception.HttpException;
import com.jian.exception.JsonException;
import com.jian.exception.ToolsException;

import RTools;
import Tips;

@ResponseBody
@Order(-1)
@ControllerAdvice
public class GlobalExceptionHandler {

	private static final Logger log = LoggerFactory.getLogger(GlobalExceptionHandler.class);

	/**
	 * 业务异常
	 */
	@ExceptionHandler({ ServiceException.class })
	@ResponseStatus(HttpStatus.OK)
	public String serviceValidHandler(HttpServletRequest request, HttpServletResponse response, ServiceException e) {
		String message = e.getLocalizedMessage();
		log.error(">>> 业务异常：{}", message);
		return message;
	}

	/**
	 * 工具类异常
	 */
	@ExceptionHandler({ HttpException.class, JsonException.class, ToolsException.class })
	@ResponseStatus(HttpStatus.OK)
	public String toolsValidHandler(HttpServletRequest request, HttpServletResponse response, HttpException e) {

		Writer result = new StringWriter();
		PrintWriter printWriter = new PrintWriter(result);
		e.printStackTrace(printWriter);
		
		log.error(">>> 工具类异常：{}", result.toString());

		return RTools.custom(Tips.ERROR0).putMsg(e.getMessage()).toJSONString();
	}

	/**
	 * 未知异常
	 */
	@ExceptionHandler({ Exception.class })
	@ResponseStatus(HttpStatus.OK)
	public String GlobalException(HttpServletRequest request, HttpServletResponse response, Exception e) {

		Writer result = new StringWriter();
		PrintWriter printWriter = new PrintWriter(result);
		e.printStackTrace(printWriter);
		
		log.error(">>> 未知异常：{}", result.toString());
		
		return RTools.custom(Tips.ERROR0).putMsg(e.getMessage()).toJSONString();
	}


	/**
	 * 内存溢出
	 */
	@ResponseBody
	@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
	@ExceptionHandler(OutOfMemoryError.class)
	private String handleOutOfMemoryError(OutOfMemoryError e) {
		String message = e.getLocalizedMessage();
		System.out.println("----------------------------");
		System.out.println(message);
		try {
			
			String cmd = "";
			String pid = System.getProperty("PID");
			String osName = System.getProperty("os.name");
			String javaVersion = System.getProperty("java.version");
			String javaBin = System.getProperty("java.home").split(javaVersion)[0].replace("jre", "jdk") + javaVersion + File.separator + "bin";
			String userDir = System.getProperty("user.dir");
			String jstackPath = userDir + File.separator + "jstack_" + System.currentTimeMillis() + ".txt";
			if(osName.toLowerCase().contains("windows")){
				// cmd /c cd C:\\Program Files\\Java\\jre1.8.0_111\\bin && c: && jstack -F "+ pid + " > d:\\1.txt
				cmd = "cmd /c cd "+javaBin+" && "+javaBin.split(":")[0]+": && jstack -F " + pid + " > "+jstackPath;
			}else{
				cmd = "cmd -c cd "+javaBin+" && jstack -F " + pid + " > "+jstackPath;
			}
			Runtime.getRuntime().exec(cmd);
			/*Process test = Runtime.getRuntime().exec(cmd);
			InputStream in = test.getInputStream();
			BufferedReader reader = new BufferedReader(new InputStreamReader(in, "gbk"));
			String line;
			while ((line = reader.readLine()) != null) {
				System.out.println(line);
			}

			System.out.println("===========================================");
			InputStream ein = test.getErrorStream();
			BufferedReader ereader = new BufferedReader(new InputStreamReader(ein, "gbk"));
			String eline;
			while ((eline = ereader.readLine()) != null) {
				System.out.println(eline);
			}*/
			System.out.println("=======================end jstack=============================");
			String jinfoPath = userDir + File.separator + "jinfo_" + System.currentTimeMillis() + ".txt";
			if(osName.toLowerCase().contains("windows")){
				// cmd /c cd C:\\Program Files\\Java\\jre1.8.0_111\\bin && c: && jstack -F "+ pid + " > d:\\1.txt
				cmd = "cmd /c cd "+javaBin+" && "+javaBin.split(":")[0]+": && jinfo " + pid + " > "+jinfoPath;
			}else{
				cmd = "cmd -c cd "+javaBin+" && jinfo " + pid + " > "+jinfoPath;
			}
			Runtime.getRuntime().exec(cmd);
			
			System.out.println("=======================end jinfo=============================");
		} catch (Exception e2) {
			e2.printStackTrace();
		}
		
		log.error(">>> 内存溢出：{}", message);
		
		return RTools.custom(Tips.ERROR0).putMsg(e.getMessage()).toJSONString();
	}
}
