package PK;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;

import com.jian.annotation.Table;
import com.jian.handle.FillHandler;

import Dao;
import Service;
import Utils;

/**
 * @author liujian
 * @Date  
 */
public abstract class BaseServiceImpl<T, M extends BaseDao<T>> implements BaseService<T> {

	@Autowired
	protected M baseDao;
	@Autowired(required = false)
	private FillHandler fillHandler;


	//TODO ---------------------------------------------------------------------- insert

	public int add(T obj) {
		if(obj == null) {
			return 0;
		}
		//转换
		String tableName =  getTableName();
		Map<String, Object> temp = Utils.objectToMap(obj);
		//填充
		insertFill(temp, obj.getClass());
		//执行
		int res = baseDao.insert(tableName, temp);
		//Utils.mapToObject(temp, obj); //返回自增字段
		return res;
	}
	
	
	public int add(List<T> objs) {
		if(objs == null || objs.isEmpty()) {
			return 0;
		}
		String tableName =  getTableName();
		List<Map<String, Object>> list = new ArrayList<Map<String,Object>>();
		for (T t : objs) {
			Map<String, Object> temp = Utils.objectToMap(t);
			//填充
			insertFill(temp, t.getClass());
			list.add(temp);
		}
		int res = baseDao.insertBatch(tableName, list);
		return res;
	}
	
	//TODO ---------------------------------------------------------------------- delete

	
	public int delete(Map<String, Object> condition) {
		if(condition == null || condition.isEmpty()) {
			return 0;
		}
		String tableName =  getTableName();
		return baseDao.delete(tableName, condition);
	}
	
	public int deleteBatch(String column, List<String> values) {
		if(values == null || values.isEmpty()) {
			return 0;
		}
		String tableName =  getTableName();
		return baseDao.deleteBatch(tableName, column, values);
	}

	//TODO ---------------------------------------------------------------------- update

	
	public int modify(T obj) {
		if(obj == null) {
			return 0;
		}
		//值
		Map<String, Object> value = Utils.objectToMap(obj);
		//填充
		updateFill(value, obj.getClass());
		//条件
		List<String> pkeys = Utils.getPriColumns(obj.getClass()); //主键
		Map<String, Object> condition = new HashMap<String, Object>();
		for (String string : pkeys) {
			condition.put(string, value.get(string));
			value.remove(string);
		}
		//执行
		return modify(value, condition);
	}
	
	public int modify(Map<String, Object> value, Map<String, Object> condition) {
		if(value == null || value.isEmpty() || condition == null || condition.isEmpty()) {
			return 0;
		}
		String tableName =  getTableName();
		return baseDao.update(tableName, value, condition);
	}

	public int modify(List<T> objs) {
		if(objs == null || objs.isEmpty()) {
			return 0;
		}
		String tableName =  getTableName();
		List<Map<String, Object>> list = new ArrayList<Map<String,Object>>();
		for (T t : objs) {
			Map<String, Object> temp = Utils.objectToMap(t);
			//填充
			updateFill(temp, t.getClass());
			list.add(temp);
		}
		return baseDao.updateBatch(tableName, list);
	}

	//TODO ----------------------------------------------------------------------select

	
	public T findOne(Map<String, Object> condition) {
		String tableName =  getTableName();
		condition = condition != null && condition.isEmpty() ? null : condition;
		Map<String, Object> rmap = baseDao.selectOne(tableName, null, condition);
		return Utils.mapToObject(rmap, getObejctClass());
	}
	
	
	public Map<String, Object> findOneMap(List<String> columns, Map<String, Object> condition) {
		String tableName =  getTableName();
		condition = condition != null && condition.isEmpty() ? null : condition;
		return baseDao.selectOne(tableName, columns, condition);
	}

	
	public List<T> findAll() {
		String tableName =  getTableName();
		Class<T> clzz = getObejctClass();
		List<Map<String, Object>> rlist = baseDao.selectAll(tableName, null);
		List<T> list = rlist.stream()
				.map(e -> Utils.mapToObject(e, clzz))
				.collect(Collectors.toList());
		return list;
	}

	
	public List<T> findList(Map<String, Object> condition) {
		String tableName =  getTableName();
		condition = condition != null && condition.isEmpty() ? null : condition;
		Class<T> clzz = getObejctClass();
		List<Map<String, Object>> rlist = baseDao.selectList(tableName, null, condition);
		List<T> list = rlist.stream()
				.map(e -> Utils.mapToObject(e, clzz))
				.collect(Collectors.toList());
		return list;
	}

	
	public List<Map<String, Object>> findListMap(List<String> columns, Map<String, Object> condition) {
		String tableName =  getTableName();
		condition = condition != null && condition.isEmpty() ? null : condition;
		return baseDao.selectList(tableName, columns, condition);
	}

	
	public List<T> findPage(Map<String, Object> condition, int start, int rows) {
		String tableName =  getTableName();
		condition = condition != null && condition.isEmpty() ? null : condition;
		Class<T> clzz = getObejctClass();
		List<Map<String, Object>> rlist = baseDao.selectPage(tableName, null, condition, start, rows);
		List<T> list = rlist.stream()
				.map(e -> Utils.mapToObject(e, clzz))
				.collect(Collectors.toList());
		return list;
	}

	
	public List<Map<String, Object>> findPageMap(List<String> columns, Map<String, Object> condition, int start, int rows) {
		String tableName =  getTableName();
		condition = condition != null && condition.isEmpty() ? null : condition;
		return baseDao.selectPage(tableName, columns, condition, start, rows);
	}

	//TODO ----------------------------------------------------------------------size

	
	public long size(Map<String, Object> condition) {
		String tableName =  getTableName();
		condition = condition != null && condition.isEmpty() ? null : condition;
		return baseDao.size(tableName, condition);
	}
	
	
	public long sizeAll() {
		String tableName =  getTableName();
		return baseDao.sizeAll(tableName);
	}

	//TODO ----------------------------------------------------------------------other
	

	public M getDao() {
		return baseDao;
	}

	public String getTableName(){
		String tableName = "";
		Class<?> clss = Utils.getObejctClass(getClass());
		if(clss != null){
			if(clss.isAnnotationPresent(Table.class)){
				tableName = clss.getAnnotation(Table.class).value();
			}
		}
		return tableName;
	}
	
	public List<T> selectListForLog(Map<String, Object> condition) {
		return findList(condition);
	}

	//TODO ----------------------------------------------------------------------tool
	

	//获取泛型的Class
	private Class<T> getObejctClass(){
		return Utils.getObejctClass(getClass());
	}
	
	
	/**
	 * 	新增时填充
	 * @param target 
	 * @param clss
	 */
	public void insertFill(Map<String, Object> target, Class<?> clss) {
		if(fillHandler == null) {
			return;
		}
		List<String> cols = Utils.getInsertFillColumns(clss);
		if(cols == null || cols.isEmpty()) {
			return;
		}
		Map<String, Object> fillData = new HashMap<String, Object>();
		fillHandler.insertFill(fillData);
		for (String key : cols) {
			if(target.get(key) == null) { // null，填充
				target.put(key, fillData.get(key));
			}
		}
	}
	
	/**
	 * 	修改时填充
	 * @param target
	 * @param clss
	 */
	public void updateFill(Map<String, Object> target, Class<?> clss) {
		if(fillHandler == null) {
			return;
		}
		List<String> cols = Utils.getUpdateFillColumns(clss);
		if(cols == null || cols.isEmpty()) {
			return;
		}
		Map<String, Object> fillData = new HashMap<String, Object>();
		fillHandler.updateFill(fillData);
		for (String key : cols) {
			if(target.get(key) == null) { // null，填充
				target.put(key, fillData.get(key));
			}
		}
	}
	
}
