package PK;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

import javax.servlet.http.HttpServletRequest;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import App;
import SysLog;

@Aspect
@Component
@Order(4)
public class SysLogAspect {

	@Autowired
//	protected SystemLogsService service;
	
    //线程池
  	private static ExecutorService pools = new ThreadPoolExecutor(20, 20, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(1000));
  	
	private static final Logger logger = LoggerFactory.getLogger(SysLogAspect.class);
    
    
    @Around("execution(public * {Controller}.*.*(..)) && @annotation(log)")
    public Object around(ProceedingJoinPoint joinPoint, SysLog log) throws Throwable {
    	
    	long startTime = System.currentTimeMillis();
    	HttpServletRequest request = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();
    	Map<String, String[]> params = new HashMap<>(request.getParameterMap());
//    	SystemLogs slog = new SystemLogs();
        
    	//执行业务
        Throwable exception = null;
        Object res = null;
		try {
			res = joinPoint.proceed();
		} catch (Throwable e) {
			
			String str = e.toString() + " --- ";
	    	StackTraceElement[]  stackTrace = e.getStackTrace();
	    	for (StackTraceElement stackTraceElement : stackTrace) {
	    		String sstr = stackTraceElement.toString();
	    		if(sstr.contains(App.class.getPackage().getName())) { //取第一条跟本包相关的信息
	    			str += sstr;
	    			break;
	    		}
			}
	    	str = str.substring(0, str.length() > 65535 ? 65535 : str.length()); //超过一定长度截取。
//	    	slog.setException(str);
	    	
	    	exception = e;
		}
		
        //记录日志
        try {
        	/*
        	User user = null;
        	slog.setPid(Utils.newSnowflakeIdStr());
        	slog.setVersions(0);
        	slog.setDate(DateTools.formatDate());
        	if(user != null) {
        		slog.setUserId(user.getPid());
        		slog.setUserNick(user.getNick());
        	}
        	slog.setIp(Tools.getIp(request));
        	slog.setBroswer(request.getHeader("User-Agent"));
        	slog.setName(log.name());
        	slog.setDescribe(log.describe());
        	slog.setTimeConsume(System.currentTimeMillis() - startTime);
        	slog.setUri(request.getRequestURI());
        	slog.setMethodName(joinPoint.getSignature().getName());
        	slog.setClassName(joinPoint.getTarget().getClass().getName());
        	slog.setType(log.type().getValue());
        	//参数\返回值
        	String str = "";
        	// 1、需要过滤参数的
        	switch (log.type()) {
	    		case Login:
	    			params.remove("password"); //移除密码参数
	    			break;
				default:
					break;
        	}
        	// 2、需要记录参数的
        	switch (log.type()) {
    			case Upload:
					break;
				default:
	    			str = JsonTools.toJsonString(params);
	    			str = str.substring(0, str.length() > 65535 ? 65535 : str.length()); //超过一定长度截取。
	    			slog.setRequest(str);  //参数
					break;
        	}
        	// 3、需要记录返回值的
        	switch (log.type()) {
	    		case Add:
	    		case Update:
	    		case Delete:
	    		case Login:
	    		case Upload:
	    		case Other:
	    			if(res != null) {
	    				str = JsonTools.toJsonString(res);
	    				str = str.substring(0, str.length() > 65535 ? 65535 : str.length()); //超过一定长度截取。
	    				slog.setResponse(str);  //返回值
	    			}
	    		case Query:
	    		case Export:
	    		default:
	    			break;
    		}
        	
        	//保存
        	pools.execute(new Runnable() {
				
				@Override
				public void run() {
					service.add(slog);
				}
			});
        	*/
        } catch (Exception e) {
            logger.error("日志记录出错!", e);
        }

        //抛出原异常
        if(exception != null) {
        	throw exception;
        }

        return res;
    }
    
}
