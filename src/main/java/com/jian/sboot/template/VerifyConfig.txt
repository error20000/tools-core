package PK;


import java.util.Base64;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;

import com.jian.tools.core.HttpTools;
import com.jian.tools.core.JsonTools;
import com.jian.tools.core.ResultKey;
import com.jian.tools.core.ResultTools;
import com.jian.tools.core.Tips;
import com.jian.tools.core.Tools;

/**
 * 根据情况需要重写接口
 * @author liujian
 */
public class VerifyConfig {
	
	public static String loginUserCache = "CACHE_SSO_USER";
	public static String loginUserToken = "CACHE_SSO_USER_TOKEN";

	public static Config config = null;
	
	@Autowired
	public void setConfig(Config config){
		VerifyConfig.config = config;
	}

	/**
	 * 获取登录用户信息
	 * @param req
	 * @return
	 */
	public static String getUserInfo(HttpServletRequest req){
		//TODO do something
		
		return null;
	}
	
	
	/**
	 * 获取登录用户信息
	 * @param req
	 * @return T
	 */
	public static <T> T getUserInfo(HttpServletRequest req, Class<T> clzz){
		//TODO do something
		
		return null;
	}

	/**
	 * 写入登录用户信息
	 * @return
	 */
	public static synchronized void setUserInfo(HttpServletRequest req, Map<String, Object> ssoUser){
		//TODO do something
		
	}

	/**
	 * 授权验证<br/>
	 * 步骤：<br/>
	 * 1、获取登录用户。<br/>
	 * 2、获取接口。<br/>
	 * 3、查询接口权限。<br/>
	 * 通过情况：<br/>
	 * 1、如果找不到接口，通过。<br/>
	 * 2、如果接口是开放的，通过。<br/>
	 * 3、如果有接口权限，通过。<br/>
	 * @param req
	 * @return 通过返回null
	 */
	public static Map<String, Object> verifyAuth(HttpServletRequest req){
		//TODO do something
		
		return null;
	}
	
	/**
	 * 参数签名验证
	 * @param req
	 * @return 通过返回null
	 */
	public static Map<String, Object> verifySign(HttpServletRequest req){
		//TODO do something
		
		return null;
	}
	
	/**
	 * 登录验证
	 * @param req
	 * @return 通过返回null
	 */
	public static Map<String, Object> verifyLogin(HttpServletRequest req){
		//TODO do something
		if(!Tools.isNullOrEmpty(config.sso_url)){
			//单点登录验证.
			return verifyLoginSSO(req);
		}else{
			//本地session验证.
			return verifyLoginNormal(req);
		}
	}
	
	private static Map<String, Object> verifyLoginNormal(HttpServletRequest req){
		HttpSession session = req.getSession();
		Object temp = session.getAttribute(config.login_session_key);
		if(temp == null){
			return ResultTools.custom(Tips.ERROR111).put(ResultKey.DATA, "verifyLoginNormal session is null!").build();
		}
		return null;
	}
	
	private static Map<String, Object> verifyLoginSSO(HttpServletRequest req){
		//sso
		String token = getTokenSSO(req);
		String host = req.getHeader("host");

		if(Tools.isNullOrEmpty(token)){
			return ResultTools.custom(Tips.ERROR111).put(ResultKey.DATA, "verifyLoginSSO token is null!").build();
		}
		//缓存在session，节约sso访问时间次数
		HttpSession session = req.getSession();
		Object temp = session.getAttribute(loginUserToken);
		if(temp != null && token.equals(temp)){
			return null;
		}
		//sso验证
		String res = HttpTools.getInstance().sendHttpGet(config.sso_url + "/api/user/userAuth?token="+token+"&host="+host);
		Map<String, Object> map = new HashMap<>();
		try {
			map = JsonTools.jsonToMap(res);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		if(map.get("code") == null || Tools.parseInt(map.get("code") + "") != 1){
			return map;
		}else{
			//保存用户
			Map<String, Object> data = JsonTools.jsonToMap(JsonTools.toJsonString(map.get("data")));
			if(data != null){
				Map<String, Object> user =JsonTools.jsonToMap(JsonTools.toJsonString(data.get("user")));
				if(user != null){
					session.setAttribute(loginUserToken, token); //缓存sso的token。
					session.setAttribute(loginUserCache, user); //缓存sso的用户信息。
					//写入帐号信息
					setUserInfo(req, user);
				}
			}
		}
		
		return null;
	}
	
	private static String getTokenSSO(HttpServletRequest req){
//		String tokenStr = Tools.isNullOrEmpty(req.getHeader("token")) ? Tools.getReqParamSafe(req, "token") : req.getHeader("token"); //Authorization Basic 
		//读取cookie
		String tokenStr = "";
		Cookie[] cookies = req.getCookies();
		if(cookies != null){
			for (int i = 0; i < cookies.length; i++) {
				Cookie tmp = cookies[i];
				if("token".equals(tmp.getName())){
					tokenStr = tmp.getValue();
					break;
				}
			}
		}
		//Authorization
		if(Tools.isNullOrEmpty(tokenStr)){
			tokenStr = Tools.isNullOrEmpty(req.getHeader("Authorization")) ? "" : Base64.getDecoder().decode(req.getHeader("Authorization").replace("Basic ", "")).toString();
		}
		//header parameter
		if(Tools.isNullOrEmpty(tokenStr)){
			tokenStr = Tools.isNullOrEmpty(req.getHeader("token")) ? Tools.getReqParamSafe(req, "token") : req.getHeader("token");
		}
		return tokenStr;
	}
	
	private static String getSSOUid(HttpServletRequest req){
		String uid = "";
		//token
		String token = getTokenSSO(req);
		if(token.split("[.]").length > 2){
			uid = token.split("[.]")[1];
		}
		return uid;
	}
	
	
}
